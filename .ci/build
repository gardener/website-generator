#!/bin/bash
set -exu

if [[ $(uname) == 'Darwin' ]]; then
  READLINK_BIN="greadlink"
else
  READLINK_BIN="readlink"
fi

HUGO=${HUGO:-hugo}
FORK=${FORK:-gardener}
BRANCH=${BRANCH:-master}

if [[ -z "${GARDENER_WEBSITE_GENERATOR_PATH:-}" ]]; then
  generatorRepoPath="$(${READLINK_BIN} -f $(dirname ${0})/..)"
else
  generatorRepoPath="$(${READLINK_BIN} -f "${GARDENER_WEBSITE_GENERATOR_PATH}")"
fi
if [[ ! -d "${generatorRepoPath}" ]]; then
  echo "website-generator directory path is invalid ["${generatorRepoPath}"]. Set $GARDENER_WEBSITE_GENERATOR_PATH to a correct path or run from website-generator cloned repo."
  exit 1
fi
if [[ -z "${GARDENER_WEBSITE_PATH:-}" ]]; then
  # Fallback to "website" repo cloned as peer directory to "website-generator"
  websiteRepoPath="$(${READLINK_BIN} -f $(dirname ${0})/../../website)"
else
  websiteRepoPath="$(${READLINK_BIN} -f "${GARDENER_WEBSITE_PATH}")"
fi

generator=${generatorRepoPath}
website=${websiteRepoPath}/docs
echo "Generated site directory: ${website}"

cd ${generator}

if [ ! -f "./latestDocVersions" ]; then
  echo "build failed: missing latestDocVersions file"
  exit -1
fi

# Setup authentication tokens if not supplied in env
if [[ -z "${GIT_OAUTH_TOKEN:-}" ]] && [[ -z "${GIT_USER:-}" ]] && [[ -z "${GIT_PASSWORD:-}" ]]; then
  # Check if gardener-ci is available (in local setup)
  command -v gardener-ci >/dev/null && gardenci="true" || gardenci=""
  if [[ $gardenci == "true" ]]; then
    gardener-ci config attribute --cfg-type github --cfg-name github_com --key technical_users --json >github_com_yaml
    if [[ -r github_com_yaml ]]; then
      # get auth token and strip lead/trail quotes
      export GIT_OAUTH_TOKEN=$(sed -e 's/^"//' -e 's/"$//' <<<$(jq .[0].authToken github_com_yaml))
      rm github_com_yaml
    fi
  fi
fi
test $GIT_OAUTH_TOKEN #fail fast

#
CLONE="temp"
HUGO_CONTENT=hugo/content
#

# Clear from previous runs
rm -rf $HUGO_CONTENT
rm -rf $CLONE
rm -rf hugo/data

mkdir hugo/data
versions=$(cat latestDocVersions | sed -n -e 'H;${x;s/\n/,/g;s/^,//;p;}')
docforge2 -f https://github.com/gardener/documentation/blob/master/.docforge/website.yaml -d $HUGO_CONTENT --hugo --github-oauth-token $GIT_OAUTH_TOKEN --variables "versions=${versions}" --github-info-destination ../data || true
python3 scripts/generateVersioningFile.py
rm -rf $CLONE

cd hugo

# Generate site from ${content} into ${website}
#
echo
hugo --minify --destination ${website}

if [[ ${AUTO_PUBLISH:-true} != 'false' ]]; then
  cd ${websiteRepoPath}
  echo
  echo "Committing website changes"
  git add . -A
  git commit -m 'Automatic build triggered by last commit'
fi
